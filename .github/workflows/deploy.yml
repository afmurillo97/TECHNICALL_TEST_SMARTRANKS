name: Deploy to Production

on:
  push:
    branches:
      - main  # or master, depending on your default branch
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Debug Information
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "GitHub workspace: $GITHUB_WORKSPACE"
      
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql
        coverage: none
        
    - name: Install Composer Dependencies
      run: |
        composer install --optimize-autoloader || {
          echo "Composer install failed"
          exit 1
        }
      
    - name: Install NPM Dependencies
      run: |
        npm ci || {
          echo "NPM install failed"
          exit 1
        }
        npm run build || {
          echo "NPM build failed"
          exit 1
        }
        
    - name: Run Tests
      run: |
        # Create test environment file
        cp .env.example .env.testing
        php artisan key:generate --env=testing
        
        # Run tests with PHPUnit directly
        ./vendor/bin/phpunit || {
          echo "Tests failed"
          exit 1
        }
      
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Debug SSH Setup
      run: |
        echo "SSH agent is running: $SSH_AUTH_SOCK"
        ssh-add -l || echo "No keys added to SSH agent"
        
    - name: Add SSH known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        echo "Added host key for ${{ secrets.SERVER_HOST }}"
        
    - name: Deploy to server
      run: |
        echo "Starting deployment..."
        echo "Server: ${{ secrets.SERVER_HOST }}"
        echo "User: ${{ secrets.SSH_USER }}"
        
        # Test SSH connection
        ssh -v ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'" || {
          echo "SSH connection test failed"
          exit 1
        }
        
        # Copy deployment script
        echo "Copying deployment script..."
        scp -v deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/home/admin-tt/ || {
          echo "Failed to copy deployment script"
          exit 1
        }
        
        # Copy .env file if it exists
        if [ -f .env ]; then
          echo "Copying .env file..."
          scp -v .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/home/admin-tt/htdocs/www.technical-test.site/ || {
            echo "Failed to copy .env file"
            exit 1
          }
        else
          echo "No .env file found, skipping..."
        fi
        
        # Execute deployment script
        echo "Executing deployment script..."
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "chmod +x /home/admin-tt/deploy.sh && /home/admin-tt/deploy.sh" || {
          echo "Deployment script execution failed"
          exit 1
        }
        
    - name: Check Deployment Logs
      run: |
        echo "Checking deployment logs..."
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "tail -n 50 /home/admin-tt/htdocs/www.technical-test.site/storage/logs/deploy.log" || {
          echo "Failed to retrieve deployment logs"
          exit 1
        }
        
    - name: Check Laravel Logs
      run: |
        echo "Checking Laravel logs..."
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "tail -n 50 /home/admin-tt/htdocs/www.technical-test.site/storage/logs/laravel.log" || {
          echo "Failed to retrieve Laravel logs"
          exit 1
        }
        
    - name: Verify Deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        echo "Checking application response..."
        curl -v https://www.technical-test.site/api/documentation || {
          echo "Application verification failed"
          exit 1
        }
        
    - name: Notify on Success
      if: success()
      run: |
        echo "Deployment completed successfully!"
        echo "Application is available at: https://www.technical-test.site"
        echo "API Documentation is available at: https://www.technical-test.site/api/documentation"
        
    - name: Notify on Failure
      if: failure()
      run: |
        echo "Deployment failed!"
        echo "Please check the logs for more information."
        echo "Last 50 lines of deployment log:"
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "tail -n 50 /home/admin-tt/htdocs/www.technical-test.site/storage/logs/deploy.log" || true
        echo "Last 50 lines of Laravel log:"
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "tail -n 50 /home/admin-tt/htdocs/www.technical-test.site/storage/logs/laravel.log" || true 